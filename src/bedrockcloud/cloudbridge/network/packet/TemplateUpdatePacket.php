<?php

namespace bedrockcloud\cloudbridge\network\packet;

use bedrockcloud\cloudbridge\CloudBridge;
use bedrockcloud\cloudbridge\network\DataPacket;
use bedrockcloud\cloudbridge\objects\CloudTemplate;

class TemplateUpdatePacket extends DataPacket {

    private string $templateName;
    private bool $isLobby;
    private bool $isMaintenance;
    private bool $isBeta;
    private int $maxPlayer;
    private bool $isStatic;
    private int $type;

    public function handle()
    {
        $this->templateName = (string)$this->data["templateName"];
        $this->isLobby = (bool)$this->data["isLobby"];
        $this->isMaintenance = (bool)$this->data["isMaintenance"];
        $this->isBeta = (bool)$this->data["isBeta"];
        $this->maxPlayer = (int)$this->data["maxPlayer"];
        $this->isStatic = (bool)$this->data["isStatic"];
        $this->type = (int)$this->data["type"];

        if (array_key_exists($this->templateName, CloudBridge::$cloudTemplates)) {
            $template = CloudBridge::$cloudTemplates[$this->templateName];
            if ($template instanceof CloudTemplate) {
                $template->setIsLobby($this->isLobby());
                $template->setMaintenance($this->isMaintenance());
                $template->setBeta($this->isBeta());
                $template->setMaxPlayer($this->getMaxPlayer());
                $template->setStatic($this->isStatic());
            }
        }

        parent::handle(); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function getTemplateName(): string
    {
        return $this->templateName;
    }

    /**
     * @return bool
     */
    public function isLobby(): bool
    {
        return $this->isLobby;
    }

    /**
     * @return bool
     */
    public function isMaintenance(): bool
    {
        return $this->isMaintenance;
    }

    /**
     * @return bool
     */
    public function isBeta(): bool
    {
        return $this->isBeta;
    }

    /**
     * @return int
     */
    public function getMaxPlayer(): int
    {
        return $this->maxPlayer;
    }

    /**
     * @return bool
     */
    public function isStatic(): bool
    {
        return $this->isStatic;
    }

    /**
     * @return int
     */
    public function getType(): int
    {
        return $this->type;
    }
}